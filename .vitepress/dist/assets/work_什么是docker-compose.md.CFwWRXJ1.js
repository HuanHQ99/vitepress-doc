import{_ as a,c as i,o as e,ae as n}from"./chunks/framework.06KOO6Yt.js";const E=JSON.parse('{"title":"什么是 Docker Compose？","description":"","frontmatter":{},"headers":[],"relativePath":"work/什么是docker-compose.md","filePath":"work/什么是docker-compose.md"}'),p={name:"work/什么是docker-compose.md"};function l(h,s,k,t,o,r){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="什么是-docker-compose" tabindex="-1">什么是 Docker Compose？ <a class="header-anchor" href="#什么是-docker-compose" aria-label="Permalink to &quot;什么是 Docker Compose？&quot;">​</a></h1><p>Docker Compose 是 Docker 的一个工具，专门用于定义和管理多容器的 Docker 应用程序，简化复杂应用的部署和管理。简而言之，它允许你通过一个 YAML 文件来描述一个应用的多个服务、网络、存储空间等配置，然后用一条命令就能启动所有服务。如果你在服务器上运行多个应用，或者希望简化部署过程，Docker Compose 将是一个不可或缺的工具。</p><h2 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h2><p>在服务器上使用 Docker Compose 通常适用于以下几种场景：</p><h3 id="多服务应用的管理" tabindex="-1">多服务应用的管理 <a class="header-anchor" href="#多服务应用的管理" aria-label="Permalink to &quot;多服务应用的管理&quot;">​</a></h3><p>如果您在 NAS 上运行一个复杂的应用程序，例如包含 Web 服务器、数据库、缓存、反向代理等多个服务的应用，使用 Docker Compose 可以将这些服务整合到一个配置文件中，方便统一管理和维护。例如，一个典型的 WordPress 项目可能包括 WordPress 容器和 MySQL 容器，使用 Compose 可以同时启动这两个服务，并确保它们之间的连接配置正确。</p><h3 id="简化应用的部署" tabindex="-1">简化应用的部署 <a class="header-anchor" href="#简化应用的部署" aria-label="Permalink to &quot;简化应用的部署&quot;">​</a></h3><p>通过 Docker Compose 文件，您可以定义容器应用的各个服务及其所需的网络和存储空间。通过一键启动所有定义的服务，Docker Compose 会自动处理服务之间的依赖关系，从而简化了在 Docker 面板中部署复杂应用的过程。</p><h3 id="应用的可移植性" tabindex="-1">应用的可移植性 <a class="header-anchor" href="#应用的可移植性" aria-label="Permalink to &quot;应用的可移植性&quot;">​</a></h3><p>使用 Docker Compose 可以使容器应用具有高度的可移植性。你可以将整个应用的配置打包成一个 Compose 文件，然后在不同的服务器设备上快速部署。</p><h2 id="docker-compose-文件结构" tabindex="-1">Docker Compose 文件结构 <a class="header-anchor" href="#docker-compose-文件结构" aria-label="Permalink to &quot;Docker Compose 文件结构&quot;">​</a></h2><p>Docker Compose 文件通常命名为 <code>docker-compose.yaml</code>，它使用 YAML 语法来描述服务、网络和存储空间。一个基本的 Compose 文件结构如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;90:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./html:/usr/share/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_DATABASE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mydatabase</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">user</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">password</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./data:/var/lib/mysql</span></span></code></pre></div>`,13)]))}const c=a(p,[["render",l]]);export{E as __pageData,c as default};
